% This is code to analyse a fluorescent slab of PDMS, fitting sigmoidal
% functions to the decay to determine the interfac position. This code is
% heavily based upon the work of Joris Sprakel and Jochem Bronkhorst to fit
% dye layers encapsulated inside of a pdms matrix.

clear all

%we first locate the multipage tiff we want to analyse and load it into the
%matlab memory
% [file,path] = uigetfile('*.tif', 'Select a TIFF file for analysis');

dirlist = dir('Spot3*T*RhodamineB.tif');
%Tiff files should have a spot1_T1_TXX_channelname.tif format.
%use circshift if more then 10 stack sessions are used (first T1).

for y=1:size(dirlist,1)
    
    file = dirlist(y).name;
    path = dirlist(y).folder;
    img_info = imfinfo(file);
    tiff_sizex = img_info.Width;
    param.width=tiff_sizex-1;%save this for future reference, depends on binning!
    tiff_sizey = img_info.Height;
    param.height=tiff_sizey-1;%save this for future reference, depends on binning!
    tiff_sizez = size(imfinfo(file),1);

%     %some other parameters
%     scale_factor = 1;
%     z_pixel = 0.5;
%     %Parameter overview
%     param=struct;
%     param.binning = 2; %size of binning dimension, minimum = 2
%     param.xy_pixel = 0.41; %size of pixels in the xy direction in micrometers
%     %.41 = standard for CLSM-1, 60x objective
%     param.z_pixel = z_pixel;
%     param.scale_factor = scale_factor;
%     xy_pixel_true=param.xy_pixel*scale_factor;%the real scaling between two points in xy
%     param.xy_pixel_true = xy_pixel_true;
    
    % The parameters was generated by using: NFM_raw_analysis_jbv4_ROI_definer_FromGFP
    load('parameters.mat')

    %create the image stack in double format
    counter=1;
    FPL=nan(tiff_sizex,tiff_sizey,tiff_sizez);

    for k = 1:tiff_sizez
        A = double(imread(fullfile(path, file), k));
        FPL(:,:,counter)=A;
        counter=counter+1;
    end
    % We wish to analyse the glass PDMS interface, so we will invert the stack
    % for analysis.
    %to check, turn this on:
    % plot(reshape(sum(sum(FPL)),[],1))
    % hold on
    % plot(reshape(sum(sum(flip(FPL,3))),[],1))
    % pause(2)
    % close all

    %% Determine position %%

    % Assume the gaussian profile can be determined from an analysis of total
    % intensity in the sample. Create a popup window, and let people select a
    % box that then is used to determine the im_start and im_end.

    %Compute the summed intensity per slice
%     FPL_summed= reshape(sum(sum(FPL)),[],1);
% 
%     figure;
%     select_gauss = plot(param.z_pixel*[1:numel(FPL_summed)],FPL_summed);
%     title('Please draw a box to define searched slices. Close window to continue');
%     xlabel('z position (micrometers)');
%     ylabel('Intensity (AU)');
%     h = imrect;%draw a rectangle over the gauss
%     select_gauss_position=h.getPosition;%get the position back that was selected upon closing
%     waitfor(select_gauss)
%     %The positions in imrect are too narrow to use: round off to the z_size
%     im_start=round(select_gauss_position(1)/param.z_pixel);
%     im_end=round((select_gauss_position(1)+select_gauss_position(3))/param.z_pixel); %(left boundary+width)/resolution

    %check if the box is drawn over the end, then replace sectioning with end.
%     if im_end>k
%         im_end=k;
%     end
% 
%     if im_start<0
%         im_start=0;
%     end

    %Slice the probe layer from the entire stack
%     FPL=FPL(:,:,im_start:im_end);

    % Update A, the reference frame to be analysed, so the code below runs it
    % as normal :)
%     A = FPL(:,:,1);
    
    %% ROI punch %%

    % Define
    ROI_width = param.width; 
    ROI_height = param.height;
    ROI_xmin = param.ROI_xmin;
    ROI_ymin = param.ROI_ymin;

    %Extract the data from FPL
    FPL=FPL(ROI_ymin:ROI_ymin+ROI_height,ROI_xmin:ROI_xmin+ROI_width,:);
    

    %the operation:
    FPL = flip(FPL,3);
    
%     FPL=FPL(ROI_ymin:ROI_ymin+ROI_height,ROI_xmin:ROI_xmin+ROI_width,:);

    % Update A, the reference frame to be analysed, so the code below runs it
    % as normal :)
    A = FPL(:,:,1);
    
    
    imagesc(sum(FPL,3));

    %% Saving data%%

    % Make a new folder to save results
    
    %update path to reflect the timepoint (assumed that index and timepoint
    %are thesame!!!!
    file2 = strcat(strtok(file,'t'),'t3_T',num2str(y));
    
    OldFolder = cd(path);
%     mkdir(strtok(file,'T')); %this creates the correct folder
    mkdir(file2);
    cd(file2);
    
    print(gcf,'-dtiff', '-r300', ['SumFPLRaw.tif']);
    close all

    save workspace.mat 


    cd(OldFolder)
    disp('Sample completed')
    clearvars -except y dirlist

end
